syntax = "proto3";

package logcov.proto.logpattern;

option go_package = "logpattern_go_proto";

// The path a package in a repo
message PackagePath {
   // repo name
   // e.g. "tidb", "tikv", "github.com/pingcap/tidb"
   string repo = 1;
   // the path relative to repo root e.g. "pkg/util"
   string path = 2;
}

// A Position represents a unique location within a repo.
message Position {
   PackagePath package_path = 1;

   // A path-structured label describing the location of this object relative to
   // the repo. For code, this will generally be the relative
   // path to the file containing the log, e.g., "dm/dm-master/service.go" in dm.
   string file_path = 2;

   // The line number containing the position, 1-based.
   int32 line_number = 3;
 
   // The byte offset of the position within its line.
   int32 column_offset = 4;
}

// Function information
message FuncInfo {
   // The function name
   string name = 1;

   // Function definied position
   Position pos = 2;

   // Function code
   bytes code = 3;
}

// A LogPattern represents a log in code file
message LogPattern {
   // log position
   Position pos = 1;
   // The function this log belongs to
   FuncInfo func = 2;
   // log level "info,warn,error" if has
   string level = 3;
   // used to quickly identify the log,
   // e.g. the `format` field of Printf(format string, v ...interface{}) in 
   repeated string signature = 4;
}

// Coverage data
message Coverage {
   // code position
   Position pos = 1;
   // total count to be covered
   int32 cov_count = 2;
   // the count to be covered in every file
   map<string, int32> cov_count_by_log = 3;
}

// An UnknowLogPattern represents a log pattern that not captured by log extractor
// but exits in log
message UnknowLogPattern {
   // log position
   Position pos = 1;
   // log level "info,warn,error" if has
   string level = 2;
   // total count to be covered
   int32 cov_count = 3;
   // the count to be covered in every file
   map<string, int32> cov_count_by_log = 4;
}
